{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Container, CardContent } from '../styles/pages/Home';\nimport logoPlataforma from '../assets/logo plataforma.png';\nconst Home = () => {\n  const {\n    0: bases\n  } = useState({\n    'G - FGTS': '29870',\n    'C e M - INSS PORTABILIDADE ATUALIZADA FILE': '78025',\n    'M - UNIFICADA GRUPO SP - GOV/PME/SPPREV': '80797',\n    'G - INSS PORTABILIDADE': '69098',\n    'C - BASE FILE PORT INBURSA/CREFISA': '83106',\n    'I - TJSP': '62048',\n    'C e M - INBURSA PORTANDO D+ BANCOS PARA: ACIMA DE 500': '83752',\n    'G - PMESP AUMENTO 20%': '70014',\n    'M - GOV MT GERAL': '70967',\n    'C - INSS PORTABILIDADE INBURSA': '80802',\n    'G - PMSP - PREMIUM': '80801',\n    'M - SANTOS': '82286',\n    'I - BANCO MASTER SAQUE COMPL SEFAZ': '54283',\n    'G - PMSP AUMENTO 5%': '70015',\n    'G - OPORTUNIDADE INSS BANCO MASTER': '30730',\n    'C - INSS PORTABILIDADE CREFISA': '80803',\n    'S - UNIFICADA GRUPO SP - GOV/PME/SPPREV': '80798',\n    'I - PREF CURITIBA': '80595',\n    'M - GOV PARANA SAQUE COMPLEMENTAR MASTER': '79162',\n    'G - MARGEM REAL CARTÃO BENEFÍCIO MCC GOVSP': '70034',\n    'I - PM BETIM': '60139',\n    'G - GOV MARANHAO CARTAO BENEFICIO': '59136',\n    'G - GOV MG - GERAL': '55691',\n    'G - GOV PE': '51370',\n    'G - MT GROSSO DO SUL GERAL': '50943',\n    'G - SAQUE COMPLEMENTAR DAYCOVAL ACIMA 1000': '50008',\n    'G - REFIN SANTANDER | REDUÇÃO TAXA | PUBLICOS': '45169',\n    'G - SAQUE COMPLEMENTAR BANCO MASTER ATUALIZADO': '41975',\n    'G - COMLURB SANT': '41000',\n    'G - REFIN SANTANDER UNIFICADA': '38247',\n    'G - GOV SANTA CATARINA': '37114',\n    'G - GOV RJ CORRENTISTAS': '35994',\n    'G - OSASCO': '33270',\n    'G - 50 + VENDIDOS MARGEM ONLINE': '33263'\n  });\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: baseData,\n    1: setBaseData\n  } = useState({});\n  const {\n    0: expandedBase,\n    1: setExpandedBase\n  } = useState(null); // Estado para controlar a div expandida\n  const {\n    0: campanhasComAviso,\n    1: setCampanhasComAviso\n  } = useState([]);\n  const {\n    0: lastUpdate,\n    1: setLastUpdate\n  } = useState(new Date());\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const newData = {};\n        for (const baseName in bases) {\n          const id = bases[baseName];\n          const response = await axios.get(`https://3c.fluxoti.com/api/v1/campaigns/${id}/lists?api_token=d0NLCpTnvtsY1gQu7S38RyF47fOjnHknynBjGzWxCwpXOJqXaNwWDrGqFomq`);\n          const filteredData = response.data.data.filter(post => post.weight === 1);\n          newData[id] = filteredData;\n          const temPorcentagemMaiorQue90 = filteredData.some(post => parseFloat(post.completed_percentage) > 90);\n          if (temPorcentagemMaiorQue90) {\n            campanhasComAviso.push(id);\n          }\n        }\n        setCampanhasComAviso(campanhasComAviso);\n        setBaseData(newData);\n        setLoading(false);\n        setLastUpdate(new Date());\n      } catch (error) {\n        console.error('Erro ao buscar os dados:', error);\n        setLoading(false);\n      }\n    }\n    fetchData();\n    const interval = setInterval(fetchData, 5 * 1 * 1000); // Recarrega a cada 60 minutos\n\n    return () => clearInterval(interval); // Limpa o temporizador quando o componente é desmontado   \n  }, [bases]);\n  function renderPorcentagem(porcentagem) {\n    const porcentagemNum = parseFloat(porcentagem);\n    if (porcentagemNum === 100) {\n      const porcentagemFormatada = porcentagemNum.toFixed(0);\n      return __jsx(\"span\", {\n        className: \"porcentagem-azul\"\n      }, porcentagemFormatada, \"%\");\n    } else if (porcentagemNum >= 90 && porcentagemNum <= 99.99) {\n      const porcentagemFormatada = porcentagemNum.toFixed(0);\n      return __jsx(\"span\", {\n        className: \"porcentagem-vermelha\"\n      }, porcentagemFormatada, \"%\");\n    } else {\n      const porcentagemFormatada = porcentagemNum.toFixed(0);\n      return __jsx(\"span\", {\n        className: \"porcentagem-verde\"\n      }, porcentagemFormatada, \"%\");\n    }\n  }\n  function toggleDetails(id) {\n    if (expandedBase === id) {\n      setExpandedBase(null);\n    } else {\n      setExpandedBase(id);\n    }\n  }\n  return __jsx(CardContent, null, __jsx(\"div\", {\n    className: \"principalContent\"\n  }, __jsx(\"div\", {\n    className: \"logo\"\n  }, __jsx(\"img\", {\n    src: logoPlataforma,\n    alt: \"PH Neg\\xF3cios Plataforma\",\n    style: {\n      width: '400px',\n      height: 'auto',\n      marginTop: '5%',\n      marginBottom: '3%'\n    }\n  })), __jsx(\"nav\", null, __jsx(\"ul\", {\n    className: \"nav-links\"\n  }, __jsx(\"li\", null, __jsx(\"a\", {\n    href: \"/\"\n  }, \"Bases\")), __jsx(\"li\", {\n    className: \"center\"\n  }, __jsx(\"a\", {\n    href: \"#\"\n  }, \"Graficos\")), __jsx(\"li\", {\n    className: \"upward\"\n  }, __jsx(\"a\", {\n    href: \"#\"\n  }, \"Adicionar\")), __jsx(\"li\", {\n    className: \"forward\"\n  }, __jsx(\"a\", {\n    href: \"#\"\n  }, \"Update\")))), loading ? __jsx(\"p\", null, \"Carregando...\") : __jsx(\"div\", {\n    className: \"Cardsalign\"\n  }, Object.keys(bases).map(baseName => {\n    var _baseData$bases$baseN;\n    return __jsx(\"div\", {\n      key: baseName,\n      className: `campaign-card${expandedBase === bases[baseName] ? ' clicked' : ''}`,\n      onClick: () => toggleDetails(bases[baseName])\n    }, __jsx(\"div\", {\n      className: `base ${parseFloat(baseData[bases[baseName]][0].completed_percentage) >= 90 ? 'com-aviso' : ''}`\n    }, baseName), expandedBase === bases[baseName] && __jsx(\"div\", {\n      className: \"campaign-percentages\"\n    }, (_baseData$bases$baseN = baseData[bases[baseName]]) === null || _baseData$bases$baseN === void 0 ? void 0 : _baseData$bases$baseN.map(post => __jsx(Container, {\n      key: post.id\n    }, __jsx(\"div\", {\n      className: `percentage-item ${parseFloat(post.completed_percentage) >= 90 ? 'com-aviso' // Adiciona uma classe \"com-aviso\" se a porcentagem for maior que 90\n      : ''}`\n    }, __jsx(\"h3\", null, post.name), __jsx(\"p\", null, post.created_at), __jsx(\"h3\", {\n      className: `porcentagem-${post.completed_percentage === '100.00' ? 'verde' : 'vermelha'}`\n    }, renderPorcentagem(post.completed_percentage)), __jsx(\"p\", null, \"\\xDAltima atualiza\\xE7\\xE3o: \", lastUpdate.toLocaleTimeString()))))));\n  }))));\n};\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}